<?xml version="1.0"?>
<project name="cinematix" default="explode" basedir="." xmlns:artifact="antlib:org.apache.maven.artifact.ant">

	<!--
		Give user a chance to override without editing this file or typing -D
	-->
	<property file="${basedir}/build.properties" />

	<property name="profile" value="dev" />
	<property file="build-${profile}.properties" />

	<!-- set global properties for this build -->
	<property name="project.name" value="cinematix" />
	<property name="project.war" value="true" />
	<property name="richfaces.present" value="true" />
	<property name="dist.dir" value="dist" />
	<property name="src.model.dir" value="src/main" />
	<property name="src.action.dir" value="src/hot" />
	<property name="src.test.dir" value="src/test" />
	<property name="lib.dir" value="lib" />
	<property name="endorsed.dir" value="${lib.dir}/endorsed" />
	<property name="war.dir" value="exploded-archives/${project.name}.war" />
	<property name="exploded.archive.dir" value="${war.dir}" />
	<property name="classes.model.dir" value="${war.dir}/WEB-INF/classes" />
	<property name="action.dir" value="WEB-INF/classes" />
	<property name="classes.action.dir" value="${war.dir}/${action.dir}" />
	<property name="test.dir" value="test-build" />
	<property name="bootstrap.dir" value="${basedir}/bootstrap" />
	<property name="jboss.domain" value="default" />
	<property name="deploy.dir" value="${jboss.home}/server/${jboss.domain}/deploy" />
	<property name="war.deploy.dir" value="${deploy.dir}/${project.name}.war" />
	<property name="packaged.archive" value="${dist.dir}/${project.name}.war" />
	<property name="testng.jar" value="${basedir}/lib/testng-5.9-jdk15.jar" />
	<property name="javac.debug" value="true" />
	<property name="javac.deprecation" value="false" />
	<property name="debug" value="false" />

	<!--Properties for validating configuration files -->
	<property name="validate.resources.dir" value="${basedir}/exploded-archives" />
	<property name="schema.dir" value="${basedir}/exploded-archives/schemas" />
	<property name="src.schema.dir" value="${schema.dir}/org/jboss/seam" />
	<property name="schema.version" value="2.1" />

	<path id="maven-ant-tasks.classpath" path="lib/maven-ant-tasks-2.1.3.jar" />
	<typedef resource="org/apache/maven/artifact/ant/antlib.xml" uri="antlib:org.apache.maven.artifact.ant" classpathref="maven-ant-tasks.classpath" />
	
	<target name="mvn-init" unless="build.classpath">
		<artifact:pom file="pom.xml" id="pomRefId"/>
		<artifact:dependencies pathId="build.classpath" filesetId="build.fileset" useScope="compile" pomRefId="pomRefId" />
		<artifact:dependencies pathId="test.classpath" filesetId="test.fileset" useScope="test" pomRefId="pomRefId" />
		<artifact:dependencies pathId="runtime.classpath" filesetId="runtime.fileset" useScope="runtime" pomRefId="pomRefId" />
	</target>

	<target name="init" depends="mvn-init" description="Initialize the build">

		<mkdir dir="${classes.model.dir}" />
		<mkdir dir="${classes.action.dir}" />
		<mkdir dir="${dist.dir}" />

		<condition property="is.debug" value="true">
			<istrue value="${debug}" />
		</condition>
		<property name="transactionManagerLookupClass" value="org.hibernate.transaction.JBossTransactionManagerLookup" />
		<property name="ejbJndiPattern" value="${project.name}/#{ejbName}/local" />
		<condition property="seamBootstrapsPu" value="false" else="true">
			<available file="${jboss.home}/lib/jboss-vfs.jar" />
			<!-- JBoss AS >= 5.0 -->
		</condition>
		<condition property="seamEmfRef" value="#{entityManagerFactory}" else="#{null}">
			<istrue value="${seamBootstrapsPu}" />
		</condition>
		<condition property="puJndiName" value="#{null}" else="java:comp/env/${project.name}/pu">
			<istrue value="${seamBootstrapsPu}" />
		</condition>

		<filterset id="persistence">
			<filter token="transactionManagerLookupClass" value="${transactionManagerLookupClass}" />
		</filterset>
		<filterset id="seam">
			<filter token="ejbJndiPattern" value="${ejbJndiPattern}" />
			<filter token="seamBootstrapsPu" value="${seamBootstrapsPu}" />
			<filter token="seamEmfRef" value="${seamEmfRef}" />
			<filter token="puJndiName" value="${puJndiName}" />
		</filterset>
		<filterset id="profile">
			<filter token="debug" value="${debug}" />
		</filterset>

	</target>

	<target name="compilemodel" depends="init" description="Compile the Java source code" unless="eclipse.running">
		<javac classpathref="build.classpath" destdir="${classes.model.dir}" debug="${javac.debug}" deprecation="${javac.deprecation}" nowarn="on">
			<src path="${src.model.dir}" />
		</javac>
	</target>

	<target name="compileactions" depends="init" description="Compile the Java source code" unless="eclipse.running">
		<javac classpathref="build.classpath" destdir="${classes.action.dir}" debug="${javac.debug}" deprecation="${javac.deprecation}" nowarn="on">
			<classpath path="${classes.model.dir}" />
			<src path="${src.action.dir}" />
		</javac>
	</target>

	<target name="copyclasses" depends="init" description="Copy the classes that were compiled by eclipse" if="eclipse.running">
		<copy todir="${classes.model.dir}">
			<fileset dir="classes/main">
				<include name="**/*.class" />
			</fileset>
		</copy>
		<copy todir="${classes.action.dir}">
			<fileset dir="classes/hot">
				<include name="**/*.class" />
			</fileset>
		</copy>
	</target>

	<target name="compile" depends="compilemodel,compileactions,copyclasses" description="Compile the various source paths" />

	<target name="war" depends="compile" description="Build the WAR structure in a staging directory">

		<copy todir="${war.dir}">
			<fileset dir="${basedir}/view" />
		</copy>

		<copy tofile="${war.dir}/WEB-INF/classes/components.properties" file="${basedir}/resources/components-${profile}.properties">
			<filterset refid="seam" />
			<filterset refid="profile" />
		</copy>

		<copy tofile="${war.dir}/WEB-INF/classes/META-INF/persistence.xml" file="${basedir}/resources/META-INF/persistence-${profile}.xml">
			<filterset refid="persistence" />
		</copy>

		<copy todir="${war.dir}/WEB-INF">
			<fileset dir="${basedir}/resources/WEB-INF">
				<include name="*.*" />
				<include name="lib/*.*" />
				<exclude name="web.xml" />
			</fileset>
		</copy>

		<copy todir="${war.dir}/WEB-INF/lib" flatten="true">
			<fileset refid="runtime.fileset"/>
		</copy>
		
		<unjar dest="${war.dir}/WEB-INF/classes" description="Unpack entities">
			<fileset dir="${war.dir}/WEB-INF/lib">
				<include name="wx-*-entities-*.jar" />
				<include name="kudos-*-entities-*.jar" />
			</fileset>
		</unjar>

		<delete dir="${war.dir}/WEB-INF/lib">
			<include name="wx-*-entities-*.jar" />
		</delete>


		<copy todir="${war.dir}/WEB-INF/classes">
			<fileset dir="${src.model.dir}">
				<include name="**/*.component.xml" />
			</fileset>
			<fileset dir="${src.model.dir}">
				<include name="**/*.hbmwx.xml" />
				<include name="**/*.xsl" />
				<include name="**/*.png" />
			</fileset>
			<fileset dir="${basedir}/resources">
				<include name="messages*.properties" />
				<include name="*_theme.properties" />
				<include name="seam.properties" />
				<include name="*.drl" />
				<include name="META-INF/*.drl" />
				<!-- ws -->
				<!--include name="META-INF/standard-jaxws-endpoint-config.xml"/-->
				<include name="*jpdl.xml" />
				<include name="*hibernate.cfg.xml" />
				<include name="jbpm.cfg.xml" />
				<include name="META-INF/orm.xml" />
				<include name="*.skin.properties" if="richfaces.present" />
				<include name="**/*.xcss" if="richfaces.present" />
				<include name="*.modules.xml" />
				<include name="freemarker/*.ftl" />
				
				<!-- Guvnor -->
				<!--include name="change-set.xml" /-->
			</fileset>
			<!--
				move XCSS into classpath for now loading from web context only works
				in JBoss AS 4
			-->
			<fileset dir="${basedir}/view">
				<include name="**/*.xcss" if="richfaces.present" />
			</fileset>
		</copy>

		<copy todir="${war.dir}/WEB-INF" file="${basedir}/resources/WEB-INF/web.xml">
			<filterset refid="profile" />
		</copy>

	</target>

	<target name="clear-profile-artifacts" depends="init" description="Clear compiled cache of profile-specific artifacts in anticipation of a profile change">
		<delete file="${war.dir}/WEB-INF/classes/META-INF/persistence.xml" />
		<delete file="${war.dir}/WEB-INF/classes/import.sql" />
		<delete file="${war.dir}/WEB-INF/classes/components.properties" />
	</target>

	<target name="stage" depends="war" />

	<target name="archive" depends="clear-profile-artifacts,stage" description="Package the WAR archive">
		<jar jarfile="${dist.dir}/${project.name}.war" basedir="${war.dir}" />
	</target>

	<target name="datasource">
		<fail unless="jboss.home">jboss.home not set</fail>
		<copy file="${basedir}/resources/${profile}-ds.xml" tofile="${deploy.dir}/${project.name}-ds.xml" />
	</target>

	<target name="explode" depends="stage,datasource" description="Deploy the exploded archive">
		<fail unless="jboss.home">jboss.home not set</fail>

		<mkdir dir="${war.deploy.dir}" />
		<copy todir="${war.deploy.dir}">
			<fileset dir="${war.dir}" />
		</copy>
	</target>

	<target name="unexplode" description="Undeploy the exploded archive">
		<delete failonerror="no">
			<fileset dir="${war.deploy.dir}">
				<exclude name="**/*.jar" />
			</fileset>
		</delete>
		<delete file="${deploy.dir}/${project.name}-ds.xml" failonerror="no" />
		<delete dir="${war.deploy.dir}" failonerror="no" />
	</target>

	<target name="reexplode" depends="unexplode,clean,explode" description="Undeploy the exploded archive, clean, then deploy the exploded archive" />

	<target name="check-deployed" description="Check to see if packaged archive is currently deployed">
		<fail unless="jboss.home">jboss.home not set</fail>
		<condition property="archive.deployed" value="true">
			<available file="${war.deploy.dir}" type="file" />
		</condition>
	</target>

	<target name="restart-exploded" unless="archive.deployed" description="Deploy exploded archive if not deployed as packaged archive">
		<antcall target="explode" />
		<touch file="${war.deploy.dir}/WEB-INF/web.xml" />
	</target>

	<target name="restart-deployed" if="archive.deployed" description="Deploy packaged archive if deployed as packaged archive">
		<antcall target="deploy" />
	</target>

	<target name="restart" depends="check-deployed,clear-profile-artifacts,restart-exploded,restart-deployed" description="Restart the exploded archive" />

	<target name="deploy" depends="archive,datasource" description="Deploy the packaged archive">
		<fail unless="jboss.home">jboss.home not set</fail>
		<copy todir="${deploy.dir}" file="${dist.dir}/${project.name}.war" />
	</target>

	<target name="undeploy" description="Undeploy the packaged archive">
		<delete file="${deploy.dir}/${project.name}.war" />
		<delete file="${deploy.dir}/${project.name}-ds.xml" />
	</target>

	<target name="redeploy" depends="undeploy,clean,deploy" description="Undeploy the packaged archive, clean, then deploy the packaged archive" />

	<target name="clean" description="Clean out the staging directory">
		<delete dir="${dist.dir}" />
		<delete dir="${basedir}/exploded-archives" />
		<delete dir="${basedir}/test-report" />
		<delete dir="${basedir}/test-output" />
		<delete failonerror="no" includeemptydirs="true">
			<fileset dir="${test.dir}">
				<exclude name="**/*.class" if="eclipse.running" />
			</fileset>
		</delete>
	</target>

	<target name="compiletest" unless="eclipse.running" description="Compile the Java source code for the tests">
		<mkdir dir="${test.dir}" />
		<javac classpathref="test.classpath" destdir="${test.dir}" debug="${javac.debug}" deprecation="${javac.deprecation}" nowarn="on">
			<src path="${src.action.dir}" />
			<src path="${src.model.dir}" />
			<src path="${src.test.dir}" />
		</javac>
	</target>

	<target name="copytestclasses" if="eclipse.running" description="Copy classes compiled by eclipse to the test dir">
		<mkdir dir="${test.dir}" />
		<copy todir="${test.dir}">
			<fileset dir="classes/main">
				<include name="**/*.class" />
			</fileset>
		</copy>
		<copy todir="${test.dir}">
			<fileset dir="classes/hot">
				<include name="**/*.class" />
			</fileset>
		</copy>
		<copy todir="${test.dir}">
			<fileset dir="classes/test">
				<include name="**/*.class" />
			</fileset>
		</copy>
	</target>

	<target name="buildtest" depends="init,compiletest,copytestclasses" description="Build the tests">
		<copy todir="${test.dir}">
			<fileset dir="${basedir}/resources">
				<exclude name="META-INF/persistence*.xml" />
				<exclude name="import*.sql" />
				<exclude name="*-ds.xml" />
				<exclude name="components-*.properties" />
			</fileset>
			<fileset dir="${basedir}/view" />
		</copy>
		<copy tofile="${test.dir}/META-INF/persistence.xml" file="${basedir}/resources/META-INF/persistence-test.xml" />
		<copy tofile="${test.dir}/components.properties" file="${basedir}/resources/components-test.properties" />
		<copy todir="${test.dir}" flatten="true">
			<fileset dir="${src.test.dir}">
				<include name="**/*Test.xml" />
			</fileset>
		</copy>
	</target>

	<target name="test" depends="buildtest" description="Run the tests">
		<fail message="Cannot run tests because path to project contains spaces.">
			<condition>
				<contains string="${basedir}" substring=" " />
			</condition>
		</fail>
		<condition property="incompatible.jdk" value="true">
			<and>
				<equals arg1="${ant.java.version}" arg2="1.6" />
				<not>
					<available classname="javax.xml.bind.JAXB" />
				</not>
			</and>
		</condition>
		<fail if="incompatible.jdk">You are using an incompatible JDK 6. Please use Sun JDK
			6 Update 4 (1.6.0_04) or newer or use Open JDK 6.</fail>
		<taskdef resource="testngtasks" classpath="${testng.jar}" />
		<path id="test.path">
			<path path="${test.dir}" />
			<path path="${bootstrap.dir}" />
			<path refid="test.classpath" />
		</path>
		<testng outputdir="${basedir}/test-report">
			<jvmarg line="-Dsun.lang.ClassLoader.allowArraySyntax=true" />
			<classpath refid="test.path" />
			<classfileset dir="${test.dir}" includes="**/*Test.class"/>
		</testng>
	</target>

	<target name="javadoc" depends="compile">
		<mkdir dir="${dist.dir}/apidoc" />
		<javadoc classpathref="build.classpath" destdir="${dist.dir}/apidoc" use="true" protected="true" version="true" windowtitle="${project.name} API Documentation" doctitle="${project.name} API Documentation"
			link="http://java.sun.com/j2se/5.0/docs/api">

			<packageset dir="${src.action.dir}" defaultexcludes="yes">
				<include name="*/**" />
			</packageset>

			<packageset dir="${src.model.dir}" defaultexcludes="yes">
				<include name="*/**" />
			</packageset>

		</javadoc>
	</target>

	<target name="validate" depends="stage" description="Validate the XML configuration files">
		<mkdir dir="${schema.dir}" />
		<unjar src="${lib.dir}/jboss-seam.jar" dest="${schema.dir}">
			<patternset>
				<include name="org/jboss/seam/*.xsd" />
				<include name="org/jboss/seam/*.dtd" />
			</patternset>
		</unjar>
		<ant antfile="validate.xml" target="validateConfiguration" />
	</target>

	<target name="purge" depends="undeploy" description="Clean out JBoss AS temporary deployment files">
		<delete dir="${jboss.home}/server/default/tmp/deploy" />
		<mkdir dir="${jboss.home}/server/default/tmp/deploy/" />
		<delete dir="${jboss.home}/server/default/tmp/sessions" />
		<mkdir dir="${jboss.home}/server/default/tmp/sessions" />
		<delete dir="${jboss.home}/server/default/work/jboss.web/localhost/${project.name}" />
	</target>
	
	<target name="eclipse" depends="mvn-init" description="Generate Eclipse project">
		<artifact:mvn pom="pom.xml">
			<arg value="eclipse:clean" />
			<arg value="eclipse:eclipse" />
		</artifact:mvn>
		<replace file=".classpath" summary="on">
			<replacetoken><![CDATA[kind="src" path="bootstrap" output="target/test-classes" excluding="**/*.java"]]></replacetoken>
			<replacevalue><![CDATA[kind="lib" path="bootstrap"]]></replacevalue>
		</replace>
	</target>

	<target name="dependency-tree" depends="mvn-init">
		<artifact:mvn pom="pom.xml">
			<arg value="dependency:tree"/>
		</artifact:mvn>
	</target>

	<target name="test-dependency-list" depends="mvn-init">
		<artifact:mvn pom="pom.xml">
			<arg value="dependency:list"/>
			<arg value="-DscopeIncludes=test"/>
		</artifact:mvn>
	</target>

</project>
